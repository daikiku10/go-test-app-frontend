import { useState, useReducer } from 'react'
import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import AddTask from '@/components/AddTask'
import { Task } from '@/types/task'
import TaskList from '@/components/TaskList'

let nextId = 3;
const initialTasks = [
  {id: 0, text: 'Visit Kafka Museum', done: true},
  {id: 1, text: 'Watch a puppet show', done: false},
  {id: 2, text: 'Lennon Wall pic', done: false},
];

type Action =
  | {
    type: 'added';
    id: number;
    text: string;
  }
  | {
    type: 'changed';
    task: Task;
  }
  | {
    type: 'deleted';
    id: number;
  };


export default function Home() {
  // const [tasks, setTasks] = useState<Task[]>(initialTasks);
  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);
  
  // 追加タスク関数
  function handleAddTask(text: string) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
    // setTasks([
    //   ...tasks,
    //   {
    //     id: nextId++,
    //     text: text,
    //     done: false,
    //   }
    // ])
  }
  // 変更タスク関数
  function handleChangeTask(task: Task) {
    dispatch({
      type: 'changed',
      task: task,
    });
    // setTasks(
    //   tasks.map((t) => {
    //     if (t.id === task.id) {
    //       return task;
    //     }
    //     return t;
    //   })
    // )
  }
  // 削除タスク関数
  function handleDeleteTask(taskId: number) {
    dispatch({
      type: "deleted",
      id: taskId,
    });
    // setTasks(tasks.filter((t) => t.id != taskId))
  }

  // Reducer関数
  function tasksReducer(tasks: Task[], action: Action) {
    switch (action.type) {
      case 'added': {
        console.log('追加しますよ！');
        return [
          ...tasks,
          {
            id: action.id,
            text: action.text,
            done: false,
          },
        ];
      }
      case 'changed': {
        console.log('変更しますよ！');
        return tasks.map((t) => {
          if (t.id === action.task.id) {
            return action.task;
          }
          return t;
        });
      }
      case 'deleted': {
        console.log('削除しますよ！');
        return tasks.filter((t) => t.id !== action.id);
      }
      default: {
        throw Error('Unknown action');
      }
    }
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Prague itinerary</h1>
        <AddTask onAddTask={handleAddTask} />
        <TaskList
          tasks={tasks}
          onChangeTask={handleChangeTask}
          onDeleteTask={handleDeleteTask}
        />
      </main>
    </>
  )
}
